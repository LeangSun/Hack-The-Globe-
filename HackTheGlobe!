import matplotlib
import scipy.stats as stats
from matplotlib.widgets import Slider
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize_scalar

matplotlib.use('TkAgg')


def find_min(mean, std_dev, prob, input):
    # Create a normal distribution for growth rate
    G_dist = stats.norm(mean, std_dev)
    # Calculate the quantile for a given probability as the marginal growth rate for bankruptcy
    mar_rate = G_dist.ppf(prob)

    # Calculate probability for bankruptcy adjusted
    def br_prob(pr):
        v = input
        f1 = stats.norm(mean, std_dev).cdf(mar_rate - (v / pr))
        f2 = stats.norm(mean, std_dev).cdf(mar_rate + v)
        if pr < 1e-6 or pr > 1 - 1e-6:
            return 1e6  # Return a large value to discourage the optimizer from choosing values of p near zero or one
        return f1 * pr + f2 * (1 - pr)

    # Call the minimize function to minimize the probability for bankruptcy adjusted over v_range and p_range
    result = minimize_scalar(br_prob, bounds=[1e-6, 1 - 1e-6])
    optimal_obj = result.fun
    optimal_pr = result.x
    benchmark = G_dist.ppf(optimal_pr)
    return optimal_obj, benchmark


def plot(mean, std_dev, prob):
    x_list = np.linspace(0, 0.15, 50).tolist()
    y_list, z_list = [], []
    i = 0
    while i < len(x_list):
        y, z = find_min(mean, std_dev, prob, x_list[i])
        y_list.append(y)
        z_list.append(z)
        i += 1

    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()

    z_line, = ax1.plot(x_list, z_list, color='red')
    ax1.set_xlabel('Input(as fraction of annual revenue)')
    ax1.set_ylabel('Benchmark', color='red')
    ax1.tick_params(axis='y', labelcolor='red')

    y_line, = ax2.plot(x_list, y_list, color='blue')
    ax2.set_ylabel('Probability of Bankruptcy', color='blue')
    ax2.tick_params(axis='y', labelcolor='blue')

    ax2.spines['right'].set_position(('axes', 1.1))

    fig.subplots_adjust(right=0.8)

    ax_mean = plt.axes([0.2, 0.03, 0.65, 0.015])
    ax_std_dev = plt.axes([0.2, 0.015, 0.65, 0.015])
    ax_prob = plt.axes([0.2, 0, 0.65, 0.015])

    slider_mean = Slider(ax_mean, 'Mean', -0.2, 0.2, valinit=mean)
    slider_std_dev = Slider(ax_std_dev, 'Std Dev', 0, 0.2, valinit=std_dev)
    slider_prob = Slider(ax_prob, 'Prob', 0, 0.2, valinit=prob)
    title_text = fig.suptitle(
        f'Expected growth rate:{mean:.4f}, Expected standard deviation:{std_dev:.4f}, Initial Probability '
        f'of being '
        f'insolvent:{prob:.4f}, Benchmark:{z_list[8]:.4f}')

    def update(val):
        new_mean = slider_mean.val
        new_std_dev = slider_std_dev.val
        new_prob = slider_prob.val

        new_y_list, new_z_list = [], []
        i = 0
        while i < len(x_list):
            y, z = find_min(new_mean, new_std_dev, new_prob, x_list[i])
            new_y_list.append(y)
            new_z_list.append(z)
            i += 1

        y_line.set_ydata(new_y_list)
        z_line.set_ydata(new_z_list)
        # Set new axis limits based on the data
        ax1.set_ylim(min(new_z_list) - 0.05, max(new_z_list) + 0.05)
        ax2.set_ylim(min(new_y_list) - 0.05, max(new_y_list) + 0.05)
        title_text.set_text(
            f'Expected growth rate: {new_mean:.4f}, Expected standard deviation: {new_std_dev:.4f}, Initial '
            f'Probability of being insolvent: {new_prob:.4f} , Benchmark:{z_list[8]:.4f}'
        )

        fig.canvas.draw_idle()

    slider_mean.on_changed(update)
    slider_std_dev.on_changed(update)
    slider_prob.on_changed(update)

    plt.show()


plot(-0.01, 0.01, 0.13)
